{"version":3,"sources":["TodoList/container/TodoContext.ts","TodoList/presentational/TodoInputForm.tsx","TodoList/presentational/TodoContent.tsx","TodoList/presentational/TodoUI.tsx","TodoList/container/uuid.ts","TodoList/container/TodoLogic.tsx","TodoList/TodoEnhanced.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TodoContext","createContext","TodoInputBox","styled","input","TodoInputForm","action","useContext","useState","text","setText","style","display","marginBottom","TodoControlButton","color","onClick","done","type","value","onChange","event","currentTarget","TodoList","div","TodoText","p","props","isdo","TodoContent","TodoData","map","todo","toggle","id","do","deleted","TodoTheme","h1","TodoListBox","button","TodoUI","getUniqueStr","myStrong","strong","Date","getTime","toString","Math","floor","random","Data","TodoSlice","createSlice","name","initialState","reducers","state","content","payload","concat","index","findIndex","data","todoState","filter","TodoProvider","children","useReducer","reducer","dispatch","actions","Provider","EnhancedTodo","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dad6cdd2.chunk.js","sourcesContent":["import { createContext } from 'react';\r\n\r\n// Todoリストのデータ型\r\nexport type TodoListModel = {\r\n  id: string;\r\n  todo: string;\r\n  do: 'redo' | 'undo';\r\n};\r\n\r\n// actionを格納する構造体の型\r\nexport type actionModel = {\r\n  done: (content: string) => void;\r\n  toggle: (id: string) => void;\r\n  deleted: (id: string) => void;\r\n}\r\n\r\n// Contextの型\r\ntype TodoContextModel = {\r\n  TodoData: TodoListModel[];\r\n  action: actionModel;\r\n}\r\n\r\n// Contextの作成\r\nexport const TodoContext = createContext<TodoContextModel>({} as TodoContextModel);","import { useContext, useState, VFC } from 'react';\r\nimport styled from \"styled-components\";\r\nimport { TodoContext } from '../container/TodoContext';\r\nimport { TodoControlButton } from './TodoUI';\r\n\r\n// 入力フォームの作成\r\nconst TodoInputBox = styled.input`\r\n  margin-top: 6px;\r\n  margin-left: 12px;\r\n  width: 84%;\r\n  padding: 4px 8px;\r\n  font-size: 16px;\r\n  border-radius: 3px;\r\n  border: 2px solid #ddd;\r\n  box-sizing: border-box;\r\n  :focus{\r\n    border: 2px solid #ff9900;\r\n    z-index: 10;\r\n    outline: 0;\r\n  }\r\n`;\r\n\r\nconst TodoInputForm: VFC = () => {\r\n  // コンテキストの使用\r\n  const { action } = useContext(TodoContext);\r\n  // 入力フォームの状態\r\n  const [text, setText] = useState<string>(\"\");\r\n\r\n  return (\r\n    <>\r\n      {/*\r\n        Todoの登録\r\n        ボタンとテキストボックスのセット\r\n      */}\r\n      <div\r\n        style={{\r\n          display: 'flex',\r\n          marginBottom: '22px'\r\n        }}\r\n      >\r\n        <TodoControlButton\r\n          color={'#FFC338'}\r\n          onClick={() => action.done(text)}>\r\n          done\r\n        </TodoControlButton>\r\n        <TodoInputBox\r\n          type=\"text\" value={text}\r\n          onChange={(event) => setText(event.currentTarget.value)}\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TodoInputForm;","import { useContext, VFC } from 'react';\r\nimport styled from \"styled-components\";\r\nimport { TodoContext } from '../container/TodoContext';\r\nimport { TodoControlButton } from './TodoUI';\r\n\r\n// 各Todoの背景色や左の縦線\r\nconst TodoList = styled.div`\r\n  background: #fffaf4;\r\n  border-left: solid 5px #ffaf58;\r\n  height: 4.4rem;\r\n  margin-bottom: 1rem;\r\n`;\r\n\r\n// ${(props) => (props.hoge ? \"pink\" : \"red\")}\r\n// テキストのデザイン\r\ntype Props = {\r\n  isdo: boolean;\r\n}\r\nconst TodoText = styled.p<Props>`\r\n  color: ${(props) => props.isdo ? \"#8e8e8e\" : \"#2d2d2d\"};\r\n  margin-top: 2px;\r\n  margin-left: 12px;\r\n  margin-right: 12px;\r\n`;\r\n\r\nconst TodoContent: VFC = () => {\r\n  // コンテキストの使用\r\n  const { TodoData, action } = useContext(TodoContext);\r\n\r\n  return (\r\n    <>\r\n      {TodoData.map((todo) => (\r\n        <TodoList key={todo.id}>\r\n          <div style={{display: 'flex'}}>\r\n            <TodoControlButton\r\n              color={'#FC623F'}\r\n              onClick={() => action.toggle(todo.id)}>\r\n              {todo.do}\r\n            </TodoControlButton>\r\n            <TodoControlButton\r\n              color={'#FC623F'}\r\n              onClick={() => action.deleted(todo.id)}>\r\n              Delete\r\n            </TodoControlButton>\r\n          </div>\r\n          <TodoText\r\n            isdo={todo.do === 'undo'}>\r\n              {todo.todo}\r\n            </TodoText>\r\n        </TodoList>\r\n      ))}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TodoContent;","import { VFC } from 'react';\r\nimport styled from \"styled-components\";\r\nimport TodoInputForm from './TodoInputForm';\r\nimport TodoContent from './TodoContent';\r\n\r\n// 見出しデザイン\r\nconst TodoTheme = styled.h1 `\r\n  margin-top: 16px;\r\n  font-size:3em;\r\n\ttext-align:center;\r\n\tline-height:0.95em;\r\n\tfont-weight:bold;\r\n\ttext-shadow:\r\n\t\t0 0.03em 0.03em #FFAB91,\r\n\t\t0 0.03em 0.03em #000,\r\n\t\t0 0.03em 0.03em #FBE9E7;\r\n`;\r\n\r\n// Todoリストの横幅や真ん中にそろえる\r\n// この要素の中にTodoを仕込む\r\nconst TodoListBox = styled.div`\r\n  max-width: 50vw;\r\n  min-width: 300px;\r\n  margin: 0 auto;\r\n`;\r\n\r\n// ボタンのデザイン\r\ntype ColorProps = {\r\n  color: string;\r\n};\r\nexport const TodoControlButton = styled.button<ColorProps>`\r\n  margin: 10px 0 4px 12px;\r\n  display: block;\r\n\tpadding: 0.2;\r\n\ttext-align: center;\r\n\ttext-decoration: none;\r\n\tcolor: #fff;\r\n\tbackground: ${(props) => props.color};\r\n  :hover{\r\n    opacity:0.8;\r\n\t  cursor: pointer;\r\n\t  text-decoration: none;\r\n  }\r\n`;\r\n\r\n// Todoアプリのpresentational component\r\n// マークアップやUIに関わる処理 アクションの埋め込み\r\n// 余分にContextを読み込まない\r\nconst TodoUI: VFC = () => {\r\n  return(\r\n    <div>\r\n      <TodoTheme>Todoリスト</TodoTheme>\r\n      {/*\r\n        Todoの登録、Todo一覧の表示\r\n        各アクションの埋め込み\r\n      */}\r\n      <TodoListBox>\r\n        <TodoInputForm/>  {/* Todoの入力フォーム */}\r\n        <TodoContent/>      {/* Todo一覧の閲覧 */}\r\n      </TodoListBox>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TodoUI;","export const getUniqueStr = (myStrong?: number): string => {\r\n  let strong = 1000;\r\n  if (myStrong) strong = myStrong;\r\n  return (\r\n    new Date().getTime().toString(16) +\r\n    Math.floor(strong * Math.random()).toString(16)\r\n  );\r\n}","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { FC, useReducer } from 'react';\r\nimport { TodoListModel, actionModel, TodoContext } from './TodoContext';\r\nimport { getUniqueStr} from './uuid';\r\n\r\n// 仮データの定義\r\nconst Data: TodoListModel[] = [\r\n  {\r\n    id: getUniqueStr(),\r\n    todo: '今日も一日頑張るぞい',\r\n    do: 'undo'\r\n  },\r\n  {\r\n    id: getUniqueStr(),\r\n    todo: '今日も一日頑張るぞい',\r\n    do: 'undo'\r\n  },\r\n  {\r\n    id: getUniqueStr(),\r\n    todo: '今日も一日頑張るぞい',\r\n    do: 'undo'\r\n  },\r\n  {\r\n    id: getUniqueStr(),\r\n    todo: '今日も一日頑張るぞい',\r\n    do: 'undo'\r\n  },\r\n  {\r\n    id: getUniqueStr(),\r\n    todo: '今日も一日頑張るぞい',\r\n    do: 'undo'\r\n  }\r\n];\r\n\r\nconst TodoSlice = createSlice({\r\n  name: 'todo',\r\n  initialState: Data,\r\n  reducers: {\r\n    done: (state, action: PayloadAction<string>) => {\r\n      const content: TodoListModel = {\r\n        id: getUniqueStr(),\r\n        todo: action.payload,\r\n        do: 'undo'\r\n      };\r\n      return state.concat(content);\r\n    },\r\n    toggle: (state, action: PayloadAction<string>) => {\r\n      const index = state.findIndex(data => data.id === action.payload)\r\n      let todoState = state;\r\n      if (todoState[index].do === 'redo') {\r\n        todoState[index].do = 'undo';\r\n      } else {\r\n        todoState[index].do = 'redo';\r\n      }\r\n      return todoState;\r\n    },\r\n    deleted: (state, action: PayloadAction<string>) => (\r\n      state.filter(data => data.id !== action.payload)\r\n    )\r\n  }\r\n});\r\n\r\n// プロバイダーの作成\r\nconst TodoProvider: FC = ({ children }) => {\r\n  // reducerの作成\r\n  const [todoState, dispatch] = useReducer(\r\n    TodoSlice.reducer, Data\r\n  );\r\n\r\n  // actionの作成\r\n  // deleteが何かとブッキングした\r\n  const { done, toggle, deleted } = TodoSlice.actions;\r\n\r\n  // actionを格納する定数の定義(空)\r\n  const action: actionModel = {\r\n    done: (content: string) => dispatch(done(content)),\r\n    toggle: (id: string) => dispatch(toggle(id)),\r\n    deleted: (id: string) => dispatch(deleted(id))\r\n  };\r\n\r\n  return (\r\n    <TodoContext.Provider value={{ TodoData: todoState, action }}>\r\n      {children}\r\n    </TodoContext.Provider>\r\n  );\r\n}\r\n\r\nexport default TodoProvider;\r\n\r\n// toggle関数別案\r\n// return state.map(data => {\r\n//   if (data.id === action.payload) {\r\n//     if( data.do === 'redo'){\r\n//       return {\r\n//         id: data.id,\r\n//         todo: data.todo,\r\n//         do: 'undo'\r\n//       }\r\n//     } else {\r\n//       return {\r\n//         id: data.id,\r\n//         todo: data.todo,\r\n//         do: 'redo'\r\n//       }\r\n//     }\r\n//   }\r\n//   return data;\r\n// })","import { VFC } from 'react';\r\nimport TodoUI from './presentational/TodoUI';\r\nimport TodoProvider from './container/TodoLogic';\r\n\r\n// ロジックのコンポーネントとUIのコンポーネントをここで結合\r\n// Context API でグローバルな状態を管理\r\nconst EnhancedTodo: VFC = () => {\r\n  return (\r\n    <TodoProvider>\r\n      <TodoUI/>\r\n    </TodoProvider>\r\n  )\r\n}\r\n\r\nexport default EnhancedTodo;","import { VFC } from 'react';\nimport EnhancedTodo from './TodoList/TodoEnhanced';\nimport './App.css';\n\nconst App: VFC = () => {\n  return (\n    <EnhancedTodo/>\n  )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}